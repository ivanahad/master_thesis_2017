#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('iot-monitoring:server');
var http = require('http');
var fs = require('fs'); //file system to write files
var Ipfix = require('../libs/ipfix');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/*
 *  UDP server
 */
var PORT = 9997;

var dgram = require("dgram");

var udpserver = dgram.createSocket("udp6");

var ipfix = new Ipfix();

udpserver.on("error", function (err) {
  console.log("server error:\n" + err.stack);
  udpserver.close();
});


udpserver.on("message", function (msg, rinfo) {
  var buf = new Buffer(msg, 'hex');
  console.log("server got: " + msg + " from " +
    rinfo.address + ":" + rinfo.port);
  console.log(ipfix.parse(msg));
});


udpserver.on("listening", function () {
  var address = udpserver.address();
  console.log("server listening " +
      address.address + ":" + address.port);
});

udpserver.bind(PORT);
