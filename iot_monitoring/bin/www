#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('iot-monitoring:server');
var http = require('http');
var Parser = require('binary-parser').Parser; //bit udp parser
var fs = require('fs'); //file system to write files

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//specific parser for one data record. Subject to fail because of 64-unsigned bits (doublele)
var record_parser = new Parser() 
  .uint16('source_rime')
  .uint16('destination_rime')
  .doublele('octet_delta_count')

/*
 * Parsing function
 */
var netflowHeader = new Parser() 
  // header of netflow packet
  .endianess('little')
  .uint16('version')
  .uint16('length')
  .uint32('export_time')
  .uint32('sequence')
  .uint32('dom_id')
  
  //header of record of data
  
  .uint16('record_set_id')
  .uint16('record_length')
  /*
  for(i=0;i<'record_length';i++){
    .uint16('source_rime')
    .uint16('destination_rime')
    .doublele('octet_delta_count')
  }
  */
  .array('records', {
    type: record_parser,
    length:'record_length'
  });

/*
fs.writeFile("/home/user/Desktop/master_thesis_2017/iot_monitoring/bin", "Hey there!", function(err) {
    if(err) {
        return console.log(err);
    }

    console.log("The file was saved!");
}); 
*/




/*
var path = '/home/user/Desktop/master_thesis_2017/iot_monitoring/bin',
buffer = new Buffer(netflowHeader);


fs.open(path, 'w', function(err, fd) {
    if (err) {
        throw 'error opening file: ' + err;
    }

    fs.write(fd, buffer, 0, buffer.length, null, function(err) {
        if (err) throw 'error writing file: ' + err;
        fs.close(fd, function() {
            console.log('file written');
        })
    });
});
*/

/*
 *  UPD server
 */
var PORT = 5678;
//var HOST = 'ip6-localhost';

var dgram = require("dgram");

var udpserver = dgram.createSocket("udp6");

udpserver.on("error", function (err) {
  console.log("server error:\n" + err.stack);
  udpserver.close();
});


udpserver.on("message", function (msg, rinfo) {
  var buf = new Buffer(msg, 'hex');
  console.log("server got: " + msg + " from " +
    rinfo.address + ":" + rinfo.port);
  console.log(netflowHeader.parse(buf));
  fs.writeFile("/home/user/Desktop/master_thesis_2017/iot_monitoring/bin/test.txt", "Hey there!", function(err) {
  //fs.writeFile("/home/user/Desktop/master_thesis_2017/iot_monitoring/bin/test.txt", netflowHeader.parse(buf).toString(), function(err) {
    if(err) {
        return console.log(err);
    }

    console.log("The file was saved!");
  }); 
});

/*
udpserver.on("message", function (msg, rinfo) {
  console.log("server got: " + msg + " from " +
    rinfo.address + ":" + rinfo.port);
});
*/


udpserver.on("listening", function () {
  var address = udpserver.address();
  console.log("server listening " +
      address.address + ":" + address.port);
});

udpserver.bind(PORT);
